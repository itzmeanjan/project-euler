package projecteuler

import "strings"

var series string = `73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450`

// converts byte to integer
//
// '0' - 48 ... '9' - 57
func getIntFromByte(b byte) int {
	return int(b) - 48
}

// for overlapping subproblems, we don't need to solve
// same problem multiple times, rather we'll buffer product of
// previous sequence & update it for next iteration
//
// `first` - first digit in previous sequence
// `last` - last digit in current sequence
//
// if `first` is 0, we need to recompute product of all digits
// present in current sequence, otherwise it lead to `division by zero` error
func updateProduct(prod int, first int, last int) int {
	return (prod / first) * last
}

// At very beginning we start by calculating product of
// all digits present in sequence
//
// but from next iteration subproblems start overlapping
// so instead of computing product of all digits in sequence,
// we'll just multiply next digit & divide first digit of previous sequence (
//	this part is done in above function )
func computeProduct(str string) int {
	prod := 1
	for i := 0; i < len(str); i++ {
		prod *= getIntFromByte(str[i])
	}
	return prod
}

// LargestProductInSeries - Finds largest product, generated by
// a consequtive sequence of length `digit`, present in `series`,
// which is 1000 digit number
func LargestProductInSeries(digit int) int {
	maxProd := 0
	prod := 0
	// processing multiline input string, by removing `\n` chars
	series = strings.Join(strings.Split(series, "\n"), "")
	for i := 0; i+digit <= len(series); i++ {
		if i == 0 {
			prod = computeProduct(series[i : i+13])
		} else {
			first := getIntFromByte(series[i-1])
			if first == 0 {
				prod = computeProduct(series[i : i+13])
			} else {
				prod = updateProduct(prod, first, getIntFromByte(series[i+12]))
			}
		}
		if prod > maxProd {
			maxProd = prod
		}
	}
	return maxProd
}
